@{
    Layout = "_dashLayout";
}
<style>
    .doc-calendar {
        margin: 0 auto;
        background: white;
        padding: 20px;
        background-color: #fff;
        border-radius: 4px;
        margin-bottom: 30px;
        position: relative;
        box-shadow: 0 1px 2px 0 rgba(0, 0, 0, 0.1);
    }

    h2 {
        color: #2c3e50;
        margin-bottom: 0;
        font-size: 32px;
        line-height: 1.2;
    }

    .subtitle {
        color: #3498db;
        font-size: 36px;
        margin-top: 0;
        margin-bottom: 20px;
    }

    .calendar-controls {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin: 25px 0;
    }

        .calendar-controls button {
            background: #3498db;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 5px;
            cursor: pointer;
            font-size: 16px;
            transition: background 0.3s;
        }

            .calendar-controls button:hover {
                background: #2980b9;
            }

    #month-year {
        font-size: 32px;
        text-transform: uppercase;
        margin: 0;
        font-weight: bold;
        text-align: center;
        flex-grow: 1;
    }

    .calendar-table {
        width: 100%;
        border-collapse: collapse;
        margin-bottom: 30px;
        table-layout: fixed;
    }

        .calendar-table th, .calendar-table td {
            padding: 15px;
            text-align: center;
            border: 1px solid #e0e0e0;
            vertical-align: middle;
        }

        .calendar-table th {
            background-color: #3498db;
            color: white;
            font-weight: normal;
            font-size: 16px;
            height: 40px;
        }

        .calendar-table td {
            height: 60px;
            position: relative;
            font-size: 16px;
        }

            .calendar-table td.selected {
                background-color: #d4e6f7;
                box-shadow: inset 0 0 0 2px #3498db;
            }

    .appointment-dot {
        width: 6px;
        height: 6px;
        background-color: #3498db;
        border-radius: 50%;
        margin: 4px auto 0;
    }

    .appointment-title {
        font-size: 28px;
        margin-top: 40px;
        margin-bottom: 15px;
        font-weight: bold;
        color: #2c3e50;
    }

    .appointment-table {
        width: 100%;
        border-collapse: collapse;
    }

        .appointment-table th, .appointment-table td {
            padding: 15px;
            text-align: left;
            border-bottom: 1px solid #e0e0e0;
        }

        .appointment-table th {
            background-color: #3498db;
            color: white;
            font-weight: normal;
            font-size: 16px;
        }

    .no-appointments {
        text-align: center;
        padding: 20px;
        color: #7f8c8d;
        font-style: italic;
    }

    #dashboard-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.85);
        z-index: 9998;
        backdrop-filter: blur(5px);
    }

    .subscription-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0,0,0,0.85);
        backdrop-filter: blur(8px);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 9999;
        opacity: 0;
        visibility: hidden;
        transition: all 0.4s cubic-bezier(0.32, 0.72, 0, 1);
    }

        .subscription-overlay.active {
            opacity: 1;
            visibility: visible;
        }

    .subscription-modal {
        background: white;
        border-radius: 16px;
        width: 100%;
        max-width: 420px;
        box-shadow: 0 12px 40px rgba(0,0,0,0.2);
        transform: translateY(30px) scale(0.95);
        transition: all 0.4s cubic-bezier(0.32, 0.72, 0, 1);
        overflow: hidden;
        border: 1px solid rgba(255,255,255,0.1);
    }

    .subscription-overlay.active .subscription-modal {
        transform: translateY(0) scale(1);
    }

    .modal-header {
        padding: 28px 24px 20px;
        text-align: center;
        background: linear-gradient(to right, #f8f9fa, #ffffff);
        border-bottom: 1px solid #eee;
        position: relative;
        display: flex;
        flex-direction: column;
        align-items: center; /* This ensures everything centers properly */
    }

    .icon-wrapper {
        width: 72px;
        height: 72px;
        margin: 0 auto 18px;
        background: #fff2f2;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        box-shadow: 0 4px 12px rgba(255, 82, 82, 0.2);
    }

    .icon {
        width: 40px;
        height: 40px;
        color: #ff5252;
    }

    .modal-header h2 {
        margin: 0;
        color: #2c3e50;
        font-size: 24px;
        font-weight: 700;
        letter-spacing: -0.3px;
    }

    .modal-body {
        padding: 24px;
    }

        .modal-body p {
            color: #555;
            margin-bottom: 24px;
            text-align: center;
            line-height: 1.6;
            font-size: 16px;
        }

    .features-list {
        margin: 28px 0;
        padding: 0 12px;
    }

    .feature-item {
        display: flex;
        align-items: center;
        padding: 12px 0;
        border-bottom: 1px solid #f0f0f0;
    }

        .feature-item:last-child {
            border-bottom: none;
        }

    .feature-icon {
        width: 22px;
        height: 22px;
        margin-right: 14px;
        color: #4CAF50;
        flex-shrink: 0;
    }

    .feature-item span {
        color: #444;
        font-size: 15px;
        font-weight: 500;
    }

    .modal-footer {
        display: flex;
        padding: 20px;
        background: #f9f9f9;
        border-top: 1px solid #eee;
        gap: 12px;
    }


    .btn-outline {
        background: white;
        border: 1px solid #ddd;
        color: #555;
    }

        .btn-outline:hover {
            background: #f5f5f5;
            border-color: #ccc;
        }

    .btn-primary {
        background: linear-gradient(to right, #3498db, #2980b9);
        color: white;
        box-shadow: 0 2px 8px rgba(52, 152, 219, 0.3);
    }

        .btn-primary:hover {
            background: linear-gradient(to right, #2980b9, #2472a4);
            box-shadow: 0 3px 12px rgba(52, 152, 219, 0.4);
        }

    .btn-icon {
        width: 20px;
        height: 20px;
        margin-right: 8px;
    }

    /* Animation when appearing */

    /* Disable interactions when modal is active */
    body.modal-open {
        overflow: hidden;
    }

        body.modal-open .main-wrapper {
            filter: brightness(0.5);
            pointer-events: none;
            user-select: none;
        }

</style>

<body class="@(ViewBag.NeedsSubscription ? "modal-open" : "")">
    <div id="subscription-overlay" class="subscription-overlay @(ViewBag.NeedsSubscription ? "active" : "")">
        <div class="subscription-modal">
            <div class="modal-header">
                <div class="icon-wrapper">
                    <svg class="icon" viewBox="0 0 24 24">
                        <path fill="currentColor" d="M12,2L1,21H23M12,6L19.5,19H4.5M11,10V14H13V10M11,16V18H13V16" />
                    </svg>
                </div>
                <h2>Subscription Required</h2>
            </div>
            <div class="modal-body">
                <p>Your profile will <strong>not be visible</strong> </p>

                <p>Your current plan has expired. Upgrade to continue accessing all features.</p>

                <div class="features-list">
                    <div class="feature-item">
                        <svg class="feature-icon" viewBox="0 0 24 24">
                            <path fill="currentColor" d="M9,20.42L2.79,14.21L5.62,11.38L9,14.77L18.88,4.88L21.71,7.71L9,20.42Z" />
                        </svg>
                        <span>Unlimited appointments</span>
                    </div>
                    <div class="feature-item">
                        <svg class="feature-icon" viewBox="0 0 24 24">
                            <path fill="currentColor" d="M9,20.42L2.79,14.21L5.62,11.38L9,14.77L18.88,4.88L21.71,7.71L9,20.42Z" />
                        </svg>
                        <span>Priority support</span>
                    </div>
                    <div class="feature-item">
                        <svg class="feature-icon" viewBox="0 0 24 24">
                            <path fill="currentColor" d="M9,20.42L2.79,14.21L5.62,11.38L9,14.77L18.88,4.88L21.71,7.71L9,20.42Z" />
                        </svg>
                        <span>Advanced analytics</span>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button id="logout-btn" class="btn btn-outline">
                    <svg class="btn-icon" viewBox="0 0 24 24">
                        <path fill="currentColor" d="M16,17V14H9V10H16V7L21,12L16,17M14,2A2,2 0 0,1 16,4V6H14V4H5V20H14V18H16V20A2,2 0 0,1 14,22H5A2,2 0 0,1 3,20V4A2,2 0 0,1 5,2H14Z" />
                    </svg>
                    Log Out
                </button>
                <a asp-controller="Home" asp-action="Offers" class="btn btn-primary" id="upgrade-btn">
                    <svg class="btn-icon" viewBox="0 0 24 24">
                        <path fill="currentColor" d="M12,15L7,10H10V3H14V10H17L12,15M21,18H3V16H21V18M21,20H3V22H21V20Z" />
                    </svg>
                    Upgrade Now
                </a>
            </div>
        </div>
    </div>
    <div class="main-wrapper" style="@(ViewBag.NeedsSubscription ? "filter: brightness(0.5); pointer-events: none;" : "")">
        <div class="header">
            <div class="header-left">
                <a href="/Guide/Dashboard" class="logo">
                    <span>Ziyara</span>
                    @* <img src="~/dash/img/guide-logo.jpg" width="35" height="35" alt=""> <span>Guide</span> *@
                </a>
            </div>
            <a id="toggle_btn" href="javascript:void(0);"><i class="fa fa-bars"></i></a>
            <a id="mobile_btn" class="mobile_btn float-left" href="#sidebar"><i class="fa fa-bars"></i></a>
            <ul class="nav user-menu float-right">
                <li class="nav-item dropdown has-arrow">
                    <a href="#" class="dropdown-toggle nav-link user-link" data-toggle="dropdown">
                        <span class="user-img">
                            <img class="rounded-circle" src="@ViewBag.img" width="24">
                            <span class="status online"></span>
                        </span>
                        <span>Guide.@ViewBag.name</span>
                    </a>
                    <div class="dropdown-menu">
                        <a class="dropdown-item" href="/">Home</a>
                        <a class="dropdown-item" asp-controller="Guide" asp-action="ProfileD">My Profile</a>
                        <a class="dropdown-item" asp-controller="Guide" asp-action="editd">Edit Profile</a>
                        <form class="form-inline" asp-area="Identity" asp-page="/Account/Logout" method="post">
                            <button type="submit" class="dropdown-item">Logout</button>
                        </form>
                    </div>
                </li>
            </ul>
        </div>
        <div class="sidebar" id="sidebar">
            <div class="sidebar-inner slimscroll">
                <div id="sidebar-menu" class="sidebar-menu">
                    <ul>
                        <li class="menu-title">Main</li>
                        <li class="active">
                            <a href=""><i class="fa fa-dashboard"></i> <span>Dashboard</span></a>
                        </li>
                        <li>
                            <a asp-controller="Guide" asp-action="aprovel"><i class="fa fa-calendar"></i> <span>Bookings</span></a>
                        </li>
                        <li>
                            <a asp-controller="Guide" asp-action="History"><i class="fa fa-clock-o"></i> <span>History</span></a>
                        </li>
                    </ul>
                </div>
            </div>
        </div>
        <div class="page-wrapper">
            <div class="content">
                <div id="dashboard-flip-clock" class="flip-clock-wrapper">
                    <div class="flip-clock-unit">
                        <div class="flip-clock-digit" id="dashboard-flip-clock-days-1">0</div>
                        <div class="flip-clock-digit" id="dashboard-flip-clock-days-0">0</div>
                        <div class="flip-clock-label">Days</div>
                    </div>
                    <span class="flip-clock-divider">:</span>
                    <div class="flip-clock-unit">
                        <div class="flip-clock-digit" id="dashboard-flip-clock-hours-1">0</div>
                        <div class="flip-clock-digit" id="dashboard-flip-clock-hours-0">0</div>
                        <div class="flip-clock-label">Hours</div>
                    </div>
                    <span class="flip-clock-divider">:</span>
                    <div class="flip-clock-unit">
                        <div class="flip-clock-digit" id="dashboard-flip-clock-minutes-1">0</div>
                        <div class="flip-clock-digit" id="dashboard-flip-clock-minutes-0">0</div>
                        <div class="flip-clock-label">Minutes</div>
                    </div>
                    <span class="flip-clock-divider">:</span>
                    <div class="flip-clock-unit">
                        <div class="flip-clock-digit" id="dashboard-flip-clock-seconds-1">0</div>
                        <div class="flip-clock-digit" id="dashboard-flip-clock-seconds-0">0</div>
                        <div class="flip-clock-label">Seconds</div>
                    </div>
                </div>


                <div class="row">
                    <div class="col-md-6 col-sm-6 col-lg-6 col-xl-3">
                        <div class="dash-widget">
                            <span class="dash-widget-bg1"><i class="fa fa-check-circle" aria-hidden="true"></i></span>
                            <div class="dash-widget-info text-right">
                                <h3>@ViewBag.app</h3>
                                <span class="widget-title1">Approved Bookings <i class="fa fa-check" aria-hidden="true"></i></span>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6 col-sm-6 col-lg-6 col-xl-3">
                        <div class="dash-widget">
                            <span class="dash-widget-bg2"><i class="fa fa-user-o"></i></span>
                            <div class="dash-widget-info text-right">
                                <h3>@ViewBag.review</h3>
                                <span class="widget-title2">Avg Rating <i class="fa fa-check" aria-hidden="true"></i></span>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6 col-sm-6 col-lg-6 col-xl-3">
                        <div class="dash-widget">
                            <span class="dash-widget-bg3"><i class="fa fa-eye"></i></span>
                            <div class="dash-widget-info text-right">
                                <h3>@ViewBag.view</h3>
                                <span class="widget-title3">Profile Views <i class="fa fa-check" aria-hidden="true"></i></span>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6 col-sm-6 col-lg-6 col-xl-3">
                        <div class="dash-widget">
                            <span class="dash-widget-bg4"><i class="fa fa-clock-o" aria-hidden="true"></i></span>
                            <div class="dash-widget-info text-right">
                                <h3>@ViewBag.pending</h3>
                                <span class="widget-title4">Pending Bookings <i class="fa fa-check" aria-hidden="true"></i></span>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="doc-calendar">
                    <h2 class="subtitle">Booking Viewer</h2>

                    <div class="calendar-controls">
                        <button id="prev-month">&lt; Previous</button>
                        <h3 id="month-year">@DateTime.Now.ToString("MMMM yyyy").ToUpper()</h3>
                        <button id="next-month">Next &gt;</button>
                    </div>

                    <table class="calendar-table">
                        <thead>
                            <tr>
                                <th>SUN</th>
                                <th>MON</th>
                                <th>TUE</th>
                                <th>WED</th>
                                <th>THU</th>
                                <th>FRI</th>
                                <th>SAT</th>
                            </tr>
                        </thead>
                        <tbody id="calendar-body">
                            <!-- Calendar days will be inserted here -->
                        </tbody>
                    </table>

                    <h3 id="appointments-title" class="appointment-title">Today's Bookings</h3>
                    <table class="appointment-table">
                        <thead>
                            <tr>
                                <th>TOURIST</th>
                                <th>BOOKING DATE</th>
                                <th>AREA</th>
                                <th>STATUS</th>
                                <th>ACTIONS</th>
                            </tr>
                        </thead>
                        <tbody id="appointments-body">
                            <!-- Appointments will be inserted here -->
                        </tbody>
                    </table>
                </div>

                <style>
                    .calendar-day {
                        cursor: pointer;
                        position: relative;
                    }

                    .appointment-highlight {
                        background-color: rgba(52, 152, 219, 0.3);
                    }

                        .appointment-highlight:hover {
                            background-color: rgba(52, 152, 219, 0.5);
                        }

                    .appointment-color-1 {
                        background-color: rgba(52, 152, 219, 0.3);
                    }

                    .appointment-color-2 {
                        background-color: rgba(46, 204, 113, 0.3);
                    }

                    .appointment-color-3 {
                        background-color: rgba(155, 89, 182, 0.3);
                    }

                    .appointment-color-4 {
                        background-color: rgba(241, 196, 15, 0.3);
                    }

                    .appointment-color-5 {
                        background-color: rgba(231, 76, 60, 0.3);
                    }

                    .modal {
                        display: none;
                        position: fixed;
                        z-index: 1000;
                        left: 0;
                        top: 0;
                        width: 100%;
                        height: 100%;
                        background-color: rgba(0,0,0,0.4);
                    }

                    .modal-content {
                        background-color: #fefefe;
                        margin: 10% auto;
                        padding: 20px;
                        border: 1px solid #888;
                        width: 50%;
                        border-radius: 5px;
                        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
                    }

                    .close {
                        color: #aaa;
                        float: right;
                        font-size: 28px;
                        font-weight: bold;
                        cursor: pointer;
                    }

                        .close:hover {
                            color: black;
                        }

                    .detail-row {
                        display: flex;
                        margin-bottom: 10px;
                    }

                    .detail-label {
                        font-weight: bold;
                        width: 120px;
                    }

                    .status-pending {
                        color: #f39c12;
                    }

                    .status-approved {
                        color: #2ecc71;
                    }

                    .status-rejected {
                        color: #e74c3c;
                    }
                </style>

                <!-- Modal for booking details -->
                <div id="bookingModal" class="modal">
                    <div class="modal-content">
                        <span class="close">&times;</span>
                        <h2>Booking Details</h2>
                        <div id="bookingDetails"></div>
                    </div>
                </div>

                <script>
                    document.addEventListener('DOMContentLoaded', function() {
                        const calendarBody = document.getElementById('calendar-body');
                        const monthYear = document.getElementById('month-year');
                        const prevMonthBtn = document.getElementById('prev-month');
                        const nextMonthBtn = document.getElementById('next-month');
                        const appointmentsBody = document.getElementById('appointments-body');
                        const appointmentsTitle = document.getElementById('appointments-title');
                        const modal = document.getElementById('bookingModal');
                        const bookingDetails = document.getElementById('bookingDetails');
                        const modalClose = document.querySelector('.close');

                        let currentDate = new Date();
                        let selectedDate = new Date();
                        let allBookings = [];
                        let guideId;

                                                               // Flip Clock Setup
                    function createFlipClock(containerId) {
                        const container = document.getElementById(containerId);
                        container.innerHTML = `
                                            <div class="flip-clock-unit">
                                                <div class="flip-clock-digits">
                                                    <div class="flip-clock-digit" id="${containerId}-days-1">0</div>
                                                    <div class="flip-clock-digit" id="${containerId}-days-0">0</div>
                                                </div>
                                                <div class="flip-clock-label">Days</div>
                                            </div>
                                            <div class="flip-clock-divider"></div>
                                            <div class="flip-clock-unit">
                                                <div class="flip-clock-digits">
                                                    <div class="flip-clock-digit" id="${containerId}-hours-1">0</div>
                                                    <div class="flip-clock-digit" id="${containerId}-hours-0">0</div>
                                                </div>
                                                <div class="flip-clock-label">Hours</div>
                                            </div>
                                            <div class="flip-clock-divider"></div>
                                            <div class="flip-clock-unit">
                                                <div class="flip-clock-digits">
                                                    <div class="flip-clock-digit" id="${containerId}-minutes-1">0</div>
                                                    <div class="flip-clock-digit" id="${containerId}-minutes-0">0</div>
                                                </div>
                                                <div class="flip-clock-label">Minutes</div>
                                            </div>
                                            <div class="flip-clock-divider"></div>
                                            <div class="flip-clock-unit">
                                                <div class="flip-clock-digits">
                                                    <div class="flip-clock-digit" id="${containerId}-seconds-1">0</div>
                                                    <div class="flip-clock-digit" id="${containerId}-seconds-0">0</div>
                                                </div>
                                                <div class="flip-clock-label">Seconds</div>
                                            </div>
                                        `;
                    }
                    // Initialize flip clocks
                    createFlipClock('dashboard-flip-clock');

                    // Subscription timer logic

                                        const monthEndDateStr = '@ViewBag.MonthEndDate';
                    const monthEndDate = monthEndDateStr ? new Date(monthEndDateStr) : null;

                    function updateFlipClock(containerId, days, hours, minutes, seconds) {
                        const daysStr = String(days).padStart(2, '0');
                        const hoursStr = String(hours).padStart(2, '0');
                        const minutesStr = String(minutes).padStart(2, '0');
                        const secondsStr = String(seconds).padStart(2, '0');

                        // Track previous seconds value to trigger animation
                        const prevSeconds = document.getElementById(`${containerId}-seconds-0`)?.textContent;

                        // Only update if elements exist
                        if (document.getElementById(`${containerId}-days-1`)) {
                            document.getElementById(`${containerId}-days-1`).textContent = daysStr[0];
                            document.getElementById(`${containerId}-days-0`).textContent = daysStr[1];
                            document.getElementById(`${containerId}-hours-1`).textContent = hoursStr[0];
                            document.getElementById(`${containerId}-hours-0`).textContent = hoursStr[1];
                            document.getElementById(`${containerId}-minutes-1`).textContent = minutesStr[0];
                            document.getElementById(`${containerId}-minutes-0`).textContent = minutesStr[1];

                            // Apply animation to seconds digits when they change
                            const secondsDigit0 = document.getElementById(`${containerId}-seconds-0`);
                            const secondsDigit1 = document.getElementById(`${containerId}-seconds-1`);

                            if (secondsDigit0 && secondsDigit0.textContent !== secondsStr[1]) {
                                secondsDigit0.classList.add('flip-effect');
                                setTimeout(() => {
                                    secondsDigit0.classList.remove('flip-effect');
                                }, 600);
                            }

                            if (secondsDigit1 && secondsDigit1.textContent !== secondsStr[0]) {
                                secondsDigit1.classList.add('flip-effect');
                                setTimeout(() => {
                                    secondsDigit1.classList.remove('flip-effect');
                                }, 600);
                            }

                            if (secondsDigit1) secondsDigit1.textContent = secondsStr[0];
                            if (secondsDigit0) secondsDigit0.textContent = secondsStr[1];

                            // Add warning class if less than 3 days remain
                            const clockElement = document.getElementById(containerId);
                            if (clockElement) {
                                if (days < 3) {
                                    clockElement.classList.add('flip-clock-warning');
                                } else {
                                    clockElement.classList.remove('flip-clock-warning');
                                }
                            }
                        }
                    }

                    function updateTimer() {
                        if (!monthEndDate || isNaN(monthEndDate)) {
                            updateFlipClock('dashboard-flip-clock', 0, 0, 0, 0);
                            return;
                        }

                        const now = new Date();
                        const timeDiff = monthEndDate - now;
                        if (timeDiff <= 0) {
                            updateFlipClock('dashboard-flip-clock', 0, 0, 0, 0);
                            return;
                        }

                        const totalDays = Math.floor(timeDiff / (1000 * 60 * 60 * 24));
                        const hours = Math.floor((timeDiff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
                        const minutes = Math.floor((timeDiff % (1000 * 60 * 60)) / (1000 * 60));
                        const seconds = Math.floor((timeDiff % (1000 * 60)) / 1000);

                        updateFlipClock('dashboard-flip-clock', totalDays, hours, minutes, seconds);
                    }

                    if (monthEndDate && !isNaN(monthEndDate)) {
                        updateTimer();
                        setInterval(updateTimer, 1000);
                    } else {
                        updateFlipClock('dashboard-flip-clock', 0, 0, 0, 0);
                    }


                        try {
                            // Extract guide ID from ViewBag
                            guideId = parseInt(document.getElementById('guideIdValue')?.value || '@ViewBag.guiedId');
                            if (isNaN(guideId)) {
                                console.error('Invalid guide ID');
                                guideId = 0;
                            }
                        } catch (e) {
                            console.error('Error parsing guide ID:', e);
                            guideId = 0;
                        }

                        // Date utility functions
                        function formatDate(date) {
                            if (!(date instanceof Date) || isNaN(date.getTime())) {
                                console.error('Invalid date object:', date);
                                return '';
                            }
                            const year = date.getFullYear();
                            const month = String(date.getMonth() + 1).padStart(2, '0');
                            const day = String(date.getDate()).padStart(2, '0');
                            return `${year}-${month}-${day}`;
                        }

                        function parseDate(dateString) {
                            if (!dateString) return new Date();

                            // Handle .NET JSON date format
                            if (dateString.includes('T')) {
                                return new Date(dateString);
                            }
                            // Handle YYYY-MM-DD format
                            const [year, month, day] = dateString.split('-').map(Number);
                            return new Date(year, month - 1, day);
                        }

                        function formatDisplayDate(dateString) {
                            if (!dateString) return 'N/A';
                            const date = typeof dateString === 'string' ? parseDate(dateString) : dateString;
                            return date.toLocaleDateString('default', {
                                year: 'numeric',
                                month: 'short',
                                day: 'numeric'
                            });
                        }

                        function isSameDay(date1, date2) {
                            return date1.getDate() === date2.getDate() &&
                                   date1.getMonth() === date2.getMonth() &&
                                   date1.getFullYear() === date2.getFullYear();
                        }

                        // Calendar functions
                        function renderCalendar(date) {
                            const year = date.getFullYear();
                            const month = date.getMonth();
                            const firstDay = new Date(year, month, 1).getDay();
                            const daysInMonth = new Date(year, month + 1, 0).getDate();

                            calendarBody.innerHTML = '';
                            monthYear.textContent = date.toLocaleString('default', { month: 'long', year: 'numeric' }).toUpperCase();

                            let dayCount = 1;
                            for (let row = 0; row < 6; row++) {
                                const tr = document.createElement('tr');

                                for (let col = 0; col < 7; col++) {
                                    const td = document.createElement('td');

                                    if ((row === 0 && col < firstDay) || dayCount > daysInMonth) {
                                        td.textContent = '';
                                    } else {
                                        const dayNum = dayCount;
                                        const thisDate = new Date(year, month, dayNum);
                                        const thisDateFormatted = formatDate(thisDate);

                                        td.innerHTML = `<div>${dayNum}</div>`;
                                        td.setAttribute('data-date', thisDateFormatted);
                                        td.classList.add('calendar-day');

                                        // Highlight today
                                        const today = new Date();
                                        if (dayNum === today.getDate() &&
                                            month === today.getMonth() &&
                                            year === today.getFullYear()) {
                                            td.style.fontWeight = 'bold';
                                            td.style.border = '2px solid #3498db';
                                        }

                                        // Check for bookings on this day - ALL days with bookings get the same blue highlight
                                        const bookingsForDay = allBookings.filter(book => {
                                            const bookingDate = parseDate(book.bookingDate);
                                            return isSameDay(thisDate, bookingDate);
                                        });

                                        if (bookingsForDay.length > 0) {
                                            // Add booking indicator
                                            const dot = document.createElement('div');
                                            dot.classList.add('appointment-dot');
                                            td.appendChild(dot);

                                            // Apply uniform blue highlight to all days with appointments
                                            td.classList.add('appointment-highlight');
                                        }

                                        // Mark selected date
                                        if (selectedDate && isSameDay(thisDate, selectedDate)) {
                                            td.classList.add('selected');
                                        }

                                        // Add click event
                                        td.addEventListener('click', () => {
                                            document.querySelectorAll('.calendar-day.selected').forEach(day => day.classList.remove('selected'));
                                            td.classList.add('selected');
                                            selectedDate = thisDate;
                                            displayBookingsForDate(thisDate);
                                        });

                                        dayCount++;
                                    }

                                    tr.appendChild(td);
                                }

                                calendarBody.appendChild(tr);

                                if (dayCount > daysInMonth) {
                                    break;
                                }
                            }
                        }

                        // Load bookings data
                        function loadMonthBookings(date) {
                            const year = date.getFullYear();
                            const month = (date.getMonth() + 1).toString().padStart(2, '0');

                            showLoadingState();

                            fetch(`/api/Appointments/for-guide/${guideId}/${year}-${month}`)
                                .then(response => {
                                    if (!response.ok) {
                                        throw new Error('Failed to fetch bookings');
                                    }
                                    return response.json();
                                })
                                .then(data => {
                                    allBookings = data;
                                    hideLoadingState();
                                    renderCalendar(date);

                                    if (selectedDate && selectedDate.getMonth() === date.getMonth() &&
                                        selectedDate.getFullYear() === date.getFullYear()) {
                                        displayBookingsForDate(selectedDate);
                                    } else {
                                        // Default to today's date if in current month or first day of month
                                        const today = new Date();
                                        if (date.getMonth() === today.getMonth() && date.getFullYear() === today.getFullYear()) {
                                            selectedDate = today;
                                        } else {
                                            selectedDate = new Date(date.getFullYear(), date.getMonth(), 1);
                                        }
                                        displayBookingsForDate(selectedDate);
                                    }
                                })
                                .catch(error => {
                                    console.error('Error loading bookings:', error);
                                    hideLoadingState();
                                    appointmentsBody.innerHTML = '<tr><td colspan="5" class="no-appointments text-danger">Error loading booking data. Please try again.</td></tr>';
                                });
                        }

                        function showLoadingState() {
                            appointmentsBody.innerHTML = '<tr><td colspan="5" class="text-center"><div class="spinner-border text-primary" role="status"><span class="sr-only">Loading...</span></div></td></tr>';
                        }

                        function hideLoadingState() {
                            // This will be replaced when displaying appointments
                        }

                        // Display bookings for a specific date
                        function displayBookingsForDate(date) {
                            appointmentsTitle.textContent = `Bookings for ${formatDisplayDate(date)}`;
                            const dateFormatted = formatDate(date);

                            const bookingsForDay = allBookings.filter(book => {
                                const bookingDate = parseDate(book.bookingDate);
                                return isSameDay(date, bookingDate);
                            });

                            appointmentsBody.innerHTML = '';

                            if (bookingsForDay.length === 0) {
                                appointmentsBody.innerHTML = `<tr><td colspan="5" class="no-appointments">No bookings on ${formatDisplayDate(date)}</td></tr>`;
                                return;
                            }

                            bookingsForDay.forEach(book => {
                                const row = document.createElement('tr');
                                const statusClass = `status-${book.approve.toLowerCase()}`;

                                row.innerHTML = `
                                    <td>${book.touristName || 'N/A'}</td>
                                    <td>${formatDisplayDate(book.bookingDate)}</td>
                                    <td>${book.areaBook || 'N/A'}</td>
                                    <td class="${statusClass}">${book.approve}</td>
                                     <td><input type="text" class="form-control reason-input mr-2" data-id="${book.id}" placeholder="Reason"><button type="button" class="btn btn-info cancel-btn" data-id="${book.id}">Cancel</button></td>

                                                          `;
                                 appointmentsBody.appendChild(row);
                              });

                                    document.querySelectorAll('.cancel-btn').forEach(button => {
                                    button.addEventListener('click', function () {
                                        const id = this.dataset.id;
                                        const reason = document.querySelector(`.reason-input[data-id="${id}"]`).value;

                                        if (!reason) {
                                            alert("Please enter a reason.");
                                            return;
                                        }

                                        if (confirm("Reject this appointment?")) {
                                            fetch(`/api/Appointments/rejectg/${id}`, {
                                                method: 'PUT',
                                                headers: { 'Content-Type': 'application/json' },
                                                body: JSON.stringify(reason)
                                            }).then(res => {
                                                if (res.ok) {
                                                    alert("Appointment rejected.");
                                                    this.closest('tr').remove();
                                                } else {
                                                    alert("Error rejecting appointment.");
                                                }
                                            });
                                        }
                                    });
                                });
                            }





                        prevMonthBtn.addEventListener('click', () => {
                            currentDate.setMonth(currentDate.getMonth() - 1);
                            loadMonthBookings(currentDate);
                        });

                        nextMonthBtn.addEventListener('click', () => {
                            currentDate.setMonth(currentDate.getMonth() + 1);
                            loadMonthBookings(currentDate);
                        });

                        modalClose.addEventListener('click', () => {
                            modal.style.display = 'none';
                        });

                        window.addEventListener('click', (event) => {
                            if (event.target === modal) {
                                modal.style.display = 'none';
                            }
                        });

                        // Add hidden field to store guide ID if not already present
                        if (!document.getElementById('guideIdValue')) {
                            const hiddenField = document.createElement('input');
                            hiddenField.type = 'hidden';
                            hiddenField.id = 'guideIdValue';
                            hiddenField.value = guideId;
                            document.body.appendChild(hiddenField);
                        }

                        // Initialize
                        loadMonthBookings(currentDate);
                    });                </script>

            </div>
        </div>
    </div>
    <script>
        document.addEventListener('DOMContentLoaded', function() {

            // Initialize modal if needed
                document.getElementById('logout-btn')?.addEventListener('click', function(e) {
            e.preventDefault();
            const token = document.querySelector('input[name="__RequestVerificationToken"]').value;

            const form = document.createElement('form');
            form.method = 'POST';
            form.action = '/Identity/Account/Logout';

            const tokenInput = document.createElement('input');
            tokenInput.type = 'hidden';
            tokenInput.name = '__RequestVerificationToken';
            tokenInput.value = token;
            form.appendChild(tokenInput);

            document.body.appendChild(form);
            form.submit();
        });

        // Handle upgrade button
        document.querySelector('.btn-primary')?.addEventListener('click', function(e) {
            // Ensure the link works even if other event handlers interfere
            window.location.href = '/subscription';
        });

        function disableDashboardInteractions() {
            // Disable all interactive elements except the modal
            document.querySelectorAll('a, button, input, select, textarea').forEach(el => {
                if (!el.closest('.subscription-modal')) {
                    el.style.pointerEvents = 'none';
                    el.style.opacity = '0.5';
                    el.tabIndex = -1;
                }
            });
        }

            // Handle extend trial button
            document.getElementById('extend-trial')?.addEventListener('click', function() {
                fetch('/api/appointments/extend-trial', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    }
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        alert(`Trial extended until ${new Date(data.newEndDate).toLocaleDateString()}`);
                        hideSubscriptionPrompt();
                        location.reload();
                    }
                })
                .catch(error => {
                    alert('Error extending trial: ' + error.message);
                });
            });

            function showSubscriptionPrompt() {
                document.body.classList.add('modal-open');
                document.getElementById('dashboard-overlay').style.display = 'block';
                document.getElementById('subscription-modal').style.display = 'block';
            }

            function hideSubscriptionPrompt() {
                document.body.classList.remove('modal-open');
                document.getElementById('dashboard-overlay').style.display = 'none';
                document.getElementById('subscription-modal').style.display = 'none';
            }
        });
    </script>

</body>